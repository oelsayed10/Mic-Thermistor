//Thermistor Code 

float slopeArray[10]; // array of size 10 to store past 10 slope values

//BPM Code 
int x = 0;
int LastTime = 0;
bool BPMTiming = false;
bool BeatComplete = false;
int BPM = 0;    
#define UpperThreshold 0.7 // 24.5 // Threshold above which the signal is considered a breath
#define LowerThreshold -0.5  // 24 for normal //Threshold below which a breath is considered complete 
int Signal; // holds the incoming raw data. Signal value can range from 0-1024
//time
unsigned long myTime;
unsigned long startMillis;


//Thermistor Definitions
// which analog pin to connect
#define THERMISTORPIN A2         
// resistance at 25 degrees C
#define THERMISTORNOMINAL 10000      
// temp. for nominal resistance (almost always 25 C)
#define TEMPERATURENOMINAL 22.778   
// how many samples to take and average, more takes longer
// but is more 'smooth'
#define NUMSAMPLES 3
// The beta coefficient of the thermistor (usually 3000-4000)
#define BCOEFFICIENT 3950
// the value of the 'other' resistor
#define SERIESRESISTOR 10000    

// Low-pass filter variables
#define LPF_ALPHA 0.1 // Filter constant (0 < alpha < 1)
float prevValue = 0;
float prevTime = 0;
float prevSlope = 0;



int samples[NUMSAMPLES];

// User-defined limits for BPM
float lowerLimit = 0;
float upperLimit = 0;

void setup(void) {
  Serial.begin(9600);
  startMillis = millis();

  for (int i = 0; i < 10; i++) {
    slopeArray[i] = 0;
  }
}

void loop(void) {
  uint8_t i;
  float average;

  // take N samples in a row, with a slight delay
  for (i=0; i< NUMSAMPLES; i++) {
   samples[i] = analogRead(THERMISTORPIN);
  }
  
  // average all the samples out
  average = 0;
  for (i=0; i< NUMSAMPLES; i++) {
    average += samples[i];
    delay(2);
  }
  average /= NUMSAMPLES;

  // convert the value to resistance
  average = 1023 / average - 1;
  average = SERIESRESISTOR / average;
  
  // Filter the value with a low-pass filter
  float filteredValue = (LPF_ALPHA * average) + ((1 - LPF_ALPHA) * prevValue);
  prevValue = filteredValue;

  // Calculate the Steinhart value from the filtered value
  float steinhart;
  steinhart = filteredValue / THERMISTORNOMINAL;     // (R/Ro)
  steinhart = log(steinhart);                        // ln(R/Ro)
  steinhart /= BCOEFFICIENT;                         // 1/B * ln(R/Ro)
  steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15);   // + (1/To)
  steinhart = 1.0 / steinhart ;                      // Invert
  steinhart -= 273.15;                               // convert absolute temp to C
  
  // Output the Steinhart value and slope
  myTime = millis();
    float slope = (steinhart - prevSlope) / ((myTime - prevTime) / 1000);
   // float slope = (steinhart - prevSlope) / (myTime - prevTime);
    prevTime = myTime;
    prevSlope = steinhart;

   // Add the current slope value to the slope array
for (int i = 9; i > 0; i--) {
  slopeArray[i] = slopeArray[i-1];
}
slopeArray[0] = slope;

// Calculate the average slope value from the past 10 values
float slopeSum = 0;
for (int i = 0; i < 10; i++) {
  slopeSum += slopeArray[i];
}
float averageSlope = slopeSum / 10;

//Serial.print(myTime);
//Serial.print(";    ");
//Serial.print(steinhart);
//Serial.print(";    ");
 Serial.println(averageSlope);

int value = averageSlope;
  if (value > UpperThreshold) {
    if (BeatComplete) {
      BPM = millis() - LastTime;
      BPM = int(60 / (float(BPM) / 1000));
      BPMTiming = false;
      BeatComplete = false;
    }
    if (BPMTiming == false) {
      LastTime = millis();
      BPMTiming = true;
    }
  }
  if ((value < LowerThreshold) & (BPMTiming))
    BeatComplete = true;
    // display bpm
    //Serial.print(";    ");
    //Serial.print(BPM);
   // Serial.println(" BPM");
  
  delay(6);
  
}
