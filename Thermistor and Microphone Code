// Libraries
#include "PDM.h"
#include "arduinoFFT.h"
#include "RunningAverage.h"
#include "ArduinoBLE.h"
#include "LSM6DS3.h"
#include "Wire.h"

//Microphone Code 

// Microphone Definitions
#define DEBUG 1
#define SAMPLES 256  //256 originally           //Must be a power of 2
#define SAMPLING_FREQUENCY 16000 //Hz, must be less than 10000 due to ADC IT WAS 16000
#define samp_siz 4 // Experiment
#define rise_threshold 4 // Experiment 

short sampleBuffer[SAMPLES];
volatile int samplesRead;

unsigned long microseconds;

RunningAverage myRA(10); //include these 2 lines of code before void setup()
int samples1 = 0;
int count = 0; 
int data; 
bool inPeak = false;
int x = 0;
int LastTime = 0;
bool BPMTiming = false;
bool BeatComplete = false;
int BPM = 0;    
#define UpperThreshold 2500 //2500
#define LowerThreshold 1700 //1700
int LED13 = 44; // The on-board Arduino LED
int Signal; // holds the incoming raw data. Signal value can range from 0-1024

double vReal[SAMPLES];
double vImag[SAMPLES];

void onPDMdata(void);

const uint8_t amplitude = 100;

arduinoFFT FFT = arduinoFFT();


//Thermistor Code 
//time
unsigned long myTime;

//Thermistor Definitions
// which analog pin to connect
#define THERMISTORPIN A2         
// resistance at 25 degrees C
#define THERMISTORNOMINAL 10000      
// temp. for nominal resistance (almost always 25 C)
#define TEMPERATURENOMINAL 25   
// how many samples to take and average, more takes longer
// but is more 'smooth'
#define NUMSAMPLES 3
// The beta coefficient of the thermistor (usually 3000-4000)
#define BCOEFFICIENT 3950
// the value of the 'other' resistor
#define SERIESRESISTOR 10000    

int samples[NUMSAMPLES];

void setup(void) {
  Serial.begin(9600); //Serial from Temp
  //Serial.begin(115200); // Serial from Mic Code

  //Microphone Setup Code
  PDM.onReceive(onPDMdata);
  PDM.setBufferSize(SAMPLES);
  //PDM.setGain(0);
  // setup the I2S audio input for the sample rate with 32-bits per sample
  if (!PDM.begin(1, 16000)) { //1,16000
    Serial.println("Failed to start PDM!");
    while (1);
  }
  myRA.clear(); // explicitly start clean -- ONLY need this line in void setup()

}

void loop(void) {
// Microphone Code 

 if (samplesRead) {
    for (int s = 0; s < SAMPLES; s++) {
      vReal[s] = sampleBuffer[s];
      vImag[s] = 0;
    }

    FFT.Windowing(vReal, SAMPLES, FFT_WIN_TYP_HAMMING, FFT_FORWARD);
    FFT.Compute(vReal, vImag, SAMPLES, FFT_FORWARD);
    FFT.ComplexToMagnitude(vReal, vImag, SAMPLES);
 
    double peak = FFT.MajorPeak(vReal, SAMPLES, SAMPLING_FREQUENCY);
    
    //Serial.println(peak);
    double rn = peak ; //this line initiates the variable, change "random(0,1000)" to the variable name you want to take the running average of; long is the type of variable rn-- running average-- is 
  myRA.addValue(rn);

  if (samples1 == 2000) // this line sets the number of samples included in the running average
  {
    samples1 = 0;
    myRA.clear();
  } 
    samplesRead = 0;
    
  samples1++;
  //Serial.print("Running Average: ");
// if (myRA.getAverage() < 600) // Any signal under 600 frequency == 0
  //{
  //  Serial.println(0);
 // }
  myTime = millis();
   Serial.print(myTime);
  Serial.print("; ");
   
   Serial.print(myRA.getAverage(), 4);
  Serial.print("; ");

  
  //delay(80); 
    

  x++;
  Signal = myRA.getAverage(); // Read the PulseSensor's value.
  // Assign this value to the "Signal" variable.
}

////////////////
  // Thermistor Code 
  uint8_t i;
  float average;

  // take N samples in a row, with a slight delay
  for (i=0; i< NUMSAMPLES; i++) {
   samples[i] = analogRead(THERMISTORPIN);
  }
  
//   average all the samples out
 average = 0;
  for (i=0; i< NUMSAMPLES; i++) {
    average += samples[i];
    //delay(1);
  }
 average /= NUMSAMPLES;

  //Serial.print("Average analog reading "); 
  //Serial.println(average);
  
  // convert the value to resistance
  average = 1023 / average - 1;
  average = SERIESRESISTOR / average;
  //Serial.print("Thermistor resistance "); 
  //Serial.println(average);
  
  float steinhart;
  steinhart = average / THERMISTORNOMINAL;     // (R/Ro)
  steinhart = log(steinhart);                  // ln(R/Ro)
  steinhart /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
  steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
  steinhart = 1.0 / steinhart ;                 // Invert
  steinhart -= 273.15;                         // convert absolute temp to C
  
  //Serial.print("Temperature "); 
   
  Serial.println(steinhart);
 // Serial.println(" *C");
  
  delay(8);
}

void onPDMdata()
{
  int bytesAvailable = PDM.available();
  PDM.read(sampleBuffer, bytesAvailable);
  samplesRead = bytesAvailable / 2;
}
